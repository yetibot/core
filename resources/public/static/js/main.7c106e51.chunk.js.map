{"version":3,"sources":["img/yetibot_lambda_blue_with_grey.svg","yetibot-context.js","util/timezone.js","components/Adapters.tsx","components/Repl.tsx","components/History.tsx","components/Users.tsx","components/User.tsx","components/Aliases.tsx","components/Search.tsx","components/Observers.tsx","components/Crons.tsx","components/Dashboard.tsx","components/App.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","YetibotContext","React","createContext","timezoneOffsetHours","Date","getTimezoneOffset","moment","relativeTimeThreshold","ADAPTERS","gql","_templateObject","Adapters","react_default","a","createElement","react_apollo_browser_umd","query","variables","timezone_offset_hours","_ref","loading","error","data","bloomer_min","isColor","message","isBold","isSize","stats","adapter_count","isStriped","className","title","adapters","map","_ref2","platform","uuid","is_connected","connection_last_active_timestamp","connection_latency","lastActiveUTC","parseInt","key","local","format","fromNow","Repl_templateObject","Repl","HISTORY","History_templateObject","HistoryComponent","state","hasFiltersSet","_","isEmpty","_this","updateQueryState","queryStateToMerge","currentQuery","newQuery","Object","objectSpread","props","history","push","concat","qs","stringify","commandsOnlyChange","e","co","target","checked","yetibotOnlyChange","yo","isCommandsOnly","isYetibotOnly","searchQuery","st","s","undefined","_qs$parse","parse","this","location","search","setStateFromQuery","console","log","prevProps","isEqual","_qs$parse2","setState","_this2","pollInterval","commands_only","yetibot_only","search_query","history_count","isHorizontal","style","marginRight","id","type","onChange","htmlFor","NavLink","to","isAlign","historyItem","createdAtUTC","utc","created_at","user_id","user_name","body","chat_source_adapter","chat_source_room","is_command","is_yetibot","Component","History","withRouter","USERS","Users_templateObject","Users","user_count","users","user","last_active","username","is_active","USER","User_templateObject","UserComponent","match","params","User","ALIASES","Aliases_templateObject","Aliases","alias_count","aliases","alias","cmd","cmd_name","SearchComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","debounce","queryString","maxWait","searchChange","value","prevQuery","isExpanded","hasIcons","placeholder","Search","OBSERVERS","Observers_templateObject","Observers","observer_count","observers","observer","pattern","event_type","user_pattern","channel_pattern","CRONS","Crons_templateObject","Crons","cron_count","crons","cron","schedule","DASHBOARD","Dashboard_templateObject","Dashboard","_Component","apply","arguments","inherits","createClass","uptime","isAncestor","hasTextAlign","isChild","command_count","isParent","command_count_today","history_count_today","fontawesome","library","add","faExternal","faSearch","faUser","faTimesCircle","faHashtag","YETIBOT_URL","window","Yetibot","url","GRAPHQL_ENDPOINT","client","ApolloClient","uri","App","defaultProps","activeClassName","Provider","BrowserRouter","width","height","src","logo","alt","exact","href","Route","path","component","d","__webpack_exports__","test","ReactDOM","render","App_App","name","document","appendChild","isJestWorking"],"mappings":"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","file":"static/js/main.7c106e51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/yetibot_lambda_blue_with_grey.144cb52a.svg\";","import React from 'react';\n\nexport const YetibotContext = React.createContext({});\n","\nexport const timezoneOffsetHours = new Date().getTimezoneOffset() / 60;\n","import React from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Hero, HeroBody, Title, Subtitle, Table, Notification} from 'bloomer';\nimport {timezoneOffsetHours} from '../util/timezone';\nimport moment from 'moment';\n\nmoment.relativeTimeThreshold('ss', 0);\n\nconst ADAPTERS = gql`\n  query stats($timezone_offset_hours: Int!) {\n    stats(timezone_offset_hours: $timezone_offset_hours) {\n      adapter_count\n    }\n\n    adapters {\n      platform\n      uuid\n      is_connected\n      connection_latency\n      connection_last_active_timestamp\n    }\n  }\n`;\n\nexport const Adapters = () => (\n  <Query query={ADAPTERS} variables={{timezone_offset_hours: timezoneOffsetHours}}>\n    {({loading, error, data}) => {\n      if (loading) return <Notification isColor='info'>Loading...</Notification>;\n      if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n\n      return (\n        <div>\n\n          <Hero isBold={true} isColor='info' isSize='small'>\n            <HeroBody>\n              <Title>Adapters</Title>\n              <Subtitle>{data.stats.adapter_count} Adapters</Subtitle>\n            </HeroBody>\n          </Hero>\n\n          <Table isStriped={true} className='is-fullwidth is-hoverable'>\n            <thead>\n              <tr>\n                <th>Platform</th>\n                <th>UUID</th>\n                <th title='Is this adapter connected?'>Connected?</th>\n                <th title='Round trip latency recorded at the last active timestamp'>Last recorded latency</th>\n                <th title='Timestamp from when we last confirmed that the connection to this Adapter was active'>\n                  Last active\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.adapters.map(({\n                platform,\n                uuid,\n                is_connected,\n                connection_last_active_timestamp,\n                connection_latency\n              }: {\n                platform: string,\n                uuid: string,\n                is_connected: string,\n                connection_last_active_timestamp: string,\n                connection_latency: string\n              }) => {\n                const lastActiveUTC = moment(new Date(parseInt(connection_last_active_timestamp)));\n                return (\n                  <tr key={uuid}>\n                    <td>{platform}</td>\n                    <td>{uuid}</td>\n                    <td>{(is_connected) ? '✅' : '❌'}</td>\n                    <td>{connection_latency} ms</td>\n                    <td title={lastActiveUTC.local().format()}>\n                      {lastActiveUTC.fromNow()}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      );\n    }}\n  </Query>\n);\n","import React from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\n\nimport {Title} from 'bloomer';\n\nconst ADAPTERS = gql`\n  {\n    adapters {\n      platform\n      uuid\n    }\n  }\n`;\n\nexport const Repl = () => (\n  <Query query={ADAPTERS}>\n    {({loading, error, data}) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error {error}</p>;\n\n      return (\n        <div>\n          {data.adapters.map(({platform, uuid}: any) =>\n            <div key={uuid}>\n              {platform} {uuid}\n            </div>\n          )}\n\n          <Title>REPL</Title>\n          <Title>Parser</Title>\n        </div>\n      );\n    }}\n  </Query>\n);\n","import React, {Component} from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Hero, HeroBody, Title, Subtitle, Table, Field,\n  // FieldLabel, Control, Input,\n  Icon, Notification} from 'bloomer';\nimport moment from 'moment';\nimport {timezoneOffsetHours} from '../util/timezone';\nimport qs from 'query-string';\nimport {withRouter, RouteComponentProps} from 'react-router';\nimport {NavLink} from 'react-router-dom';\nimport _ from 'lodash';\n// import Select from 'react-select';\n\nconst HISTORY = gql`\n\n  query history($timezone_offset_hours: Int!, $yetibot_only: Boolean!, $commands_only: Boolean!, $search_query: String) {\n    stats(timezone_offset_hours: $timezone_offset_hours) {\n      history_count\n    }\n\n    history(limit: 30, offset: 0,\n      commands_only: $commands_only,\n      yetibot_only: $yetibot_only,\n      search_query: $search_query\n    ) {\n      id\n      chat_source_adapter\n      chat_source_room\n      command\n      correlation_id\n      created_at\n      user_name\n      is_command\n      is_yetibot\n      body\n      user_id\n      user_name\n    }\n  }\n`;\n\n\ninterface Props {\n}\n\ninterface State {\n  query: {\n    // search\n    s?: string,\n    // command only\n    co?: string,\n    yo?: string\n  };\n}\n\nclass HistoryComponent extends Component<RouteComponentProps<Props>, State> {\n\n  state = ({query: {}} as State);\n\n  componentDidMount() {\n    const {s, co, yo} = qs.parse(this.props.location.search);\n    this.setStateFromQuery({s, co, yo});\n    console.log('History mounted');\n  }\n\n  hasFiltersSet = () => !(_.isEmpty(this.state.query));\n\n  componentDidUpdate(prevProps: any) {\n    // If the query was updated, propogate the change to History\n    if (!_.isEqual(prevProps.location.search, this.props.location.search)) {\n      const {s, co, yo} = qs.parse(this.props.location.search);\n      this.setStateFromQuery({s, co, yo});\n    }\n  }\n\n  setStateFromQuery({s, co, yo}: any) {\n    this.setState({query: {s, co, yo}});\n  }\n\n  // store query state on state.query then serialize it and reflect it in\n  // the browser location query string\n  updateQueryState = (queryStateToMerge: any) => {\n    const currentQuery = this.state.query;\n    const newQuery = {...currentQuery, ...queryStateToMerge};\n    this.props.history.push(`/history?${qs.stringify(newQuery)}`);\n  }\n\n  commandsOnlyChange = (e: any) => {\n    const co = e.target.checked ? '1' : '0';\n    this.updateQueryState({co});\n  }\n\n  yetibotOnlyChange = (e: any) => {\n    const yo = e.target.checked ? '1' : '0';\n    this.updateQueryState({yo});\n  }\n\n  isCommandsOnly = () => (this.state.query.co === '1');\n\n  isYetibotOnly = () => (this.state.query.yo === '1');\n\n  searchQuery = () => {\n    const st = this.state.query.s;\n    // explicity return undefined for null or empty strings\n    return (st) ? st : undefined;\n  }\n\n  render() {\n    const query = this.searchQuery();\n    return (\n      <Query\n        query={HISTORY}\n        pollInterval={0}\n        variables={{\n          commands_only: this.isCommandsOnly(),\n          yetibot_only: this.isYetibotOnly(),\n          search_query: query,\n          timezone_offset_hours: timezoneOffsetHours\n        }}\n      >\n        {({loading, error, data}) => {\n          if (loading) return <Notification isColor='info'>Loading...</Notification>;\n          if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n          return (\n            <div>\n              <Hero isBold={true} isColor='info' isSize='small'>\n                <HeroBody>\n                  <Title>History</Title>\n                  <Subtitle>\n                    Total items {data.stats.history_count}\n                  </Subtitle>\n                </HeroBody>\n              </Hero>\n\n              <div className='history-filters'>\n                <Field isHorizontal={true}>\n                  {query\n                    ? <Field isHorizontal={true} style={{marginRight: 20}}>\n                        <span>Searching for\n                          <span className='query'>{query}</span>\n                        </span>\n                      </Field>\n                    : ''}\n                  <Field isHorizontal={true} className='checkbox-field'>\n                    <input\n                      id='command-only'\n                      className='is-small is-white has-background-color is-checkradio'\n                      type='checkbox'\n                      checked={this.isCommandsOnly()}\n                      onChange={this.commandsOnlyChange}\n                    />\n                    <label htmlFor='command-only'>Commands only</label>\n                  </Field>\n                  <Field isHorizontal={true} className='checkbox-field'>\n                    <input\n                      id='yetibot-only'\n                      className='is-small is-white has-background-color is-checkradio'\n                      type='checkbox'\n                      checked={this.isYetibotOnly()}\n                      onChange={this.yetibotOnlyChange}\n                    />\n                    <label htmlFor='yetibot-only'>Yetibot only</label>\n                  </Field>\n                  <Field isHorizontal={true}>\n                    {\n                      // <FieldLabel isSize='small'>Channel</FieldLabel>\n                      // <Select\n                      // styles={customStyles}\n                      // options={[{label: 'one one one'}, {label: 'two two two'}]} />\n                     }\n                  </Field>\n                  <Field isHorizontal={true}>\n                    {\n                      // <FieldLabel isSize='small'>User</FieldLabel>\n                      // <Control hasIcons='left'>\n                      //   <Input className='is-info' isSize='small' />\n                      //   <Icon isSize='small' isAlign='left'>\n                      //     <span className='fa fa-user' aria-hidden='true'/>\n                      //   </Icon>\n                      // </Control>\n\n                    }\n                  </Field>\n                  {this.hasFiltersSet()\n                    ? (<NavLink className='button is-small is-light' to='/history'>\n                        <Icon isSize='small' isAlign='left'\n                          className='fa fa-times-circle' />\n                         <span>Reset</span>\n                       </NavLink>)\n                         : null}\n                </Field>\n              </div>\n\n              <Table isStriped={true} className='is-fullwidth is-hoverable'>\n                <thead>\n                  <tr>\n                    <th>User</th>\n                    <th>Body</th>\n                    <th>Channel</th>\n                    <th>Created</th>\n                    <th>Command?</th>\n                    <th>Yetibot?</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.history && data.history.map((historyItem: any) => {\n                    const createdAtUTC = moment.utc(historyItem.created_at);\n                    return (\n                      <tr key={historyItem.id}>\n                        <td title={`User ID ${historyItem.user_id}`}>{historyItem.user_name}</td>\n                        <td title={historyItem.id}>{historyItem.body}</td>\n                        <td title={`Adapter ${historyItem.chat_source_adapter}`}>{historyItem.chat_source_room}</td>\n                        <td title={createdAtUTC.local().format()}>{createdAtUTC.fromNow()}</td>\n                        <td>{(historyItem.is_command) ? '✅' : ''}</td>\n                        <td>{(historyItem.is_yetibot) ? '✅' : ''}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n\n}\n\nexport const History = withRouter(HistoryComponent);\n","import React from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Hero, HeroBody, Title, Subtitle, Table, Notification} from 'bloomer';\nimport * as moment from 'moment';\nimport {timezoneOffsetHours} from '../util/timezone';\nimport {NavLink} from 'react-router-dom';\n\nconst USERS = gql`\n\n  query stats($timezone_offset_hours: Int!) {\n    stats(timezone_offset_hours: $timezone_offset_hours) {\n      user_count\n    }\n\n    users {\n      id\n      is_active\n      last_active\n      username\n    }\n  }\n`;\n\nexport const Users = () => (\n  <Query query={USERS} variables={{timezone_offset_hours: timezoneOffsetHours}}>\n    {({loading, error, data}) => {\n      if (loading) return <Notification isColor='info'>Loading...</Notification>;\n      if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n\n      return (\n        <div>\n          <Hero isBold={true} isColor='info' isSize='small'>\n            <HeroBody>\n              <Title>Users</Title>\n              <Subtitle>{data.stats.user_count} Users</Subtitle>\n            </HeroBody>\n          </Hero>\n\n          <Table isStriped={true} className='is-fullwidth is-hoverable'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>User</th>\n                <th>Active?</th>\n                <th>Last active</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.users.map((user: any) => {\n                const lastActiveUTC = moment.utc(user.last_active);\n                return (\n                  <tr key={user.id}>\n                    <td>{user.id}</td>\n                    <td>\n                      <NavLink to={`/user/${user.id}`}>\n                        {user.username}\n                      </NavLink>\n                    </td>\n                    <td>{user.is_active ? '✅' : ''}</td>\n                    <td title={lastActiveUTC.local().format()}>{lastActiveUTC.fromNow()}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      );\n    }}\n  </Query>\n);\n","import React, {Component} from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Hero, HeroBody, Title, Notification} from 'bloomer';\nimport {withRouter, RouteComponentProps} from 'react-router';\n\nconst USER = gql`\n  query user($user_id: String!) {\n    user(id: $user_id) {\n      id\n      username\n    }\n  }\n`;\n\ninterface Props {\n  id?: string;\n}\n\ninterface State {\n}\n\nclass UserComponent extends Component<RouteComponentProps<Props>, State> {\n\n  render() {\n    return (\n      <Query query={USER} variables={{user_id: this.props.match.params.id}}>\n        {({loading, error, data}) => {\n          if (loading) return <Notification isColor='info'>Loading...</Notification>;\n          if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n\n          if (data.user) {\n            return (\n              <div>\n                <Hero isBold={true} isColor='info' isSize='small'>\n                  <HeroBody>\n                    <Title>{data.user.username}</Title>\n                  </HeroBody>\n                </Hero>\n              </div>\n            );\n          } else {\n            return (\n              <div>\n                <Hero isBold={true} isColor='danger' isSize='small'>\n                  <HeroBody>\n                    <Title>User not found</Title>\n                  </HeroBody>\n                </Hero>\n              </div>\n            );\n          }\n        }}\n      </Query>\n    );\n  }\n}\n\nexport const User = withRouter(UserComponent);\n","import React from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Hero, HeroBody, Title, Subtitle, Table, Notification} from 'bloomer';\nimport * as moment from 'moment';\nimport {timezoneOffsetHours} from '../util/timezone';\n\nconst ALIASES = gql`\n\n  query stats($timezone_offset_hours: Int!) {\n    stats(timezone_offset_hours: $timezone_offset_hours) {\n      alias_count\n    }\n\n    aliases{\n      cmd\n      cmd_name\n      created_at\n      id\n      user_id\n    }\n\n  }\n`;\n\nexport const Aliases = () => (\n  <Query query={ALIASES} variables={{timezone_offset_hours: timezoneOffsetHours}}>\n    {({loading, error, data}) => {\n      if (loading) return <Notification isColor='info'>Loading...</Notification>;\n      if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n\n      return (\n        <div>\n          <Hero isBold={true} isColor='info' isSize='small'>\n            <HeroBody>\n              <Title>Aliases</Title>\n              <Subtitle>{data.stats.alias_count} Aliases</Subtitle>\n            </HeroBody>\n          </Hero>\n\n          <Table isStriped={true} className='is-fullwidth is-hoverable'>\n            <thead>\n              <tr>\n                <th>Alias</th>\n                <th>Command</th>\n                <th>Created by</th>\n                <th>Created at</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.aliases.map((alias: any) => {\n                const createdAtUTC = moment.utc(alias.created_at);\n                return (\n                  <tr key={alias.id}>\n                    <td title={alias.id}>{alias.cmd}</td>\n                    <td>{alias.cmd_name}</td>\n                    <td>{alias.user_id}</td>\n                    <td title={createdAtUTC.local().format()}>{createdAtUTC.fromNow()}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      );\n    }}\n  </Query>\n);\n","import React, {Component} from 'react';\nimport {Icon, Control, Input} from 'bloomer';\nimport * as qs from 'query-string';\nimport {withRouter, RouteComponentProps} from 'react-router';\nimport _ from 'lodash';\n\ninterface Props {\n}\n\ninterface State {\n  search: string;\n}\n\nclass SearchComponent extends Component<RouteComponentProps<Props>, State> {\n\n  constructor(props: any) {\n    super(props);\n    const query = qs.parse(props.location.search);\n    this.state = {search: (query.s as string) || ''};\n    console.log('SearchComponent', query);\n  }\n\n  componentDidUpdate(prevProps: any) {\n    const prevQuery = qs.parse(prevProps.location.search);\n    const query = qs.parse(this.props.location.search);\n    if (!_.isEqual(prevQuery, query)) {\n      this.setState({search: (query.s as string) || ''});\n    }\n  }\n\n  search = _.debounce((query: string) => {\n    console.log('executing search', query);\n    const currentQuery = qs.parse(this.props.location.search);\n    const queryString = {...currentQuery, s: query};\n    this.props.history.push(`/history?${qs.stringify(queryString)}`);\n  }, 250, {maxWait: 1000})\n\n  searchChange = (e: any) => {\n    const query = e.target.value;\n    this.setState({search: query});\n    this.search(query);\n  }\n\n  render() {\n    return (\n      <Control isExpanded={true} hasIcons='left'>\n        <Input\n          value={this.state.search}\n          onChange={this.searchChange}\n          placeholder='Search History'\n          isColor='light'\n        />\n        <Icon isSize='small' isAlign='left' className='fa fa-search' />\n      </Control>\n    );\n  }\n}\n\nexport const Search = withRouter(SearchComponent);\n","import React from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Hero, HeroBody, Title, Subtitle, Table, Notification} from 'bloomer';\nimport * as moment from 'moment';\nimport {timezoneOffsetHours} from '../util/timezone';\n\nconst OBSERVERS = gql`\n\n  query stats($timezone_offset_hours: Int!) {\n    stats(timezone_offset_hours: $timezone_offset_hours) {\n      observer_count\n    }\n\n    observers{\n      channel_pattern\n      cmd\n      event_type\n      id\n      pattern\n      user_id\n      user_pattern\n      created_at\n    }\n\n  }\n`;\n\nexport const Observers = () => (\n  <Query query={OBSERVERS} variables={{timezone_offset_hours: timezoneOffsetHours}}>\n    {({loading, error, data}) => {\n      if (loading) return <Notification isColor='info'>Loading...</Notification>;\n      if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n\n      return (\n        <div>\n          <Hero isBold={true} isColor='info' isSize='small'>\n            <HeroBody>\n              <Title>Observers</Title>\n              <Subtitle>{data.stats.observer_count} Observers</Subtitle>\n            </HeroBody>\n          </Hero>\n\n          <Table isStriped={true} className='is-fullwidth is-hoverable'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Pattern</th>\n                <th>Command</th>\n                <th>Event type</th>\n                <th>Channel pattern</th>\n                <th>User pattern</th>\n                <th>Created by</th>\n                <th>Created at</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.observers.map((observer: any) => {\n                const createdAtUTC = moment.utc(observer.created_at);\n                return (\n                  <tr key={observer.id}>\n                    <td>{observer.id}</td>\n                    <td>{observer.pattern}</td>\n                    <td>{observer.cmd}</td>\n                    <td>{observer.event_type}</td>\n                    <td>{observer.user_pattern}</td>\n                    <td>{observer.channel_pattern}</td>\n                    <td>{observer.user_id}</td>\n                    <td title={createdAtUTC.local().format()}>{createdAtUTC.fromNow()}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      );\n    }}\n  </Query>\n);\n","import React from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Hero, HeroBody, Title, Subtitle, Table, Notification} from 'bloomer';\nimport * as moment from 'moment';\nimport {timezoneOffsetHours} from '../util/timezone';\n\nconst CRONS = gql`\n\n  query stats($timezone_offset_hours: Int!) {\n    stats(timezone_offset_hours: $timezone_offset_hours) {\n      cron_count\n    }\n\n    crons {\n      chat_source_adapter\n      chat_source_room\n      cmd\n      created_at\n      id\n      schedule\n      user_id\n    }\n\n  }\n`;\n\nexport const Crons = () => (\n  <Query query={CRONS} variables={{timezone_offset_hours: timezoneOffsetHours}}>\n    {({loading, error, data}) => {\n      if (loading) return <Notification isColor='info'>Loading...</Notification>;\n      if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n\n      return (\n        <div>\n          <Hero isBold={true} isColor='info' isSize='small'>\n            <HeroBody>\n              <Title>Cron Tasks</Title>\n              <Subtitle>{data.stats.cron_count} Cron Tasks</Subtitle>\n            </HeroBody>\n          </Hero>\n\n          <Table isStriped={true} className='is-fullwidth is-hoverable'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Schedule</th>\n                <th>Command</th>\n                <th>Chat source adapter</th>\n                <th>Chat source room</th>\n                <th>Created by</th>\n                <th>Created at</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.crons && data.crons.map((cron: any) => {\n                const createdAtUTC = moment.utc(cron.created_at);\n                return (\n                  <tr key={cron.id}>\n                    <td>{cron.id}</td>\n                    <td>{cron.schedule}</td>\n                    <td>{cron.cmd}</td>\n                    <td>{cron.chat_source_adapter}</td>\n                    <td>{cron.chat_source_room}</td>\n                    <td>{cron.user_id}</td>\n                    <td title={createdAtUTC.local().format()}>{createdAtUTC.fromNow()}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </div>\n      );\n    }}\n  </Query>\n);\n","import React, {Component} from 'react';\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {Tile, Hero, HeroBody, Title, Subtitle, Notification} from 'bloomer';\nimport {timezoneOffsetHours} from '../util/timezone';\n\nimport {NavLink} from 'react-router-dom';\n\nconst DASHBOARD = gql`\n  query stats($timezone_offset_hours: Int!) {\n    stats(timezone_offset_hours: $timezone_offset_hours) {\n      uptime\n      adapter_count\n      user_count\n      command_count_today\n      command_count\n      history_count\n      history_count_today\n      alias_count\n      observer_count\n      cron_count\n    }\n  }\n`;\n\ninterface DashboardProps {\n}\n\nexport class Dashboard extends Component<DashboardProps> {\n\n  render() {\n    return (\n\n      <Query query={DASHBOARD} variables={{timezone_offset_hours: timezoneOffsetHours}}>\n        {({loading, error, data}) => {\n          if (loading) return <Notification isColor='info'>Loading...</Notification>;\n          if (error) return <Notification isColor='danger'>{error.message}</Notification>;\n          const stats = data.stats;\n          return (\n            <div>\n              <Hero isBold={true} isColor='info' isSize='small'>\n                <HeroBody>\n                  <Title>Dashboard</Title>\n                  <Subtitle>Uptime {stats.uptime}</Subtitle>\n                </HeroBody>\n              </Hero>\n\n              <div className='tiles'>\n                <Tile isAncestor={true} hasTextAlign='centered'>\n\n                  <NavLink className='tile is-parent is-4' to='/adapters'>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.adapter_count}</Title>\n                      <Subtitle>Adapters</Subtitle>\n                    </Tile>\n                  </NavLink>\n\n                  <NavLink className='tile is-parent is-4' to='/history?co=1'>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.command_count}</Title>\n                      <Subtitle>Commands</Subtitle>\n                    </Tile>\n                  </NavLink>\n\n                  <Tile isSize={4} isParent={true}>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.command_count_today}</Title>\n                      <Subtitle>Commands today</Subtitle>\n                    </Tile>\n                  </Tile>\n\n                  <NavLink className='tile is-parent is-4' to='/users'>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.user_count}</Title>\n                      <Subtitle>Users</Subtitle>\n                    </Tile>\n                  </NavLink>\n\n                  <NavLink className='tile is-parent is-4' to='/history'>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.history_count}</Title>\n                      <Subtitle>History items</Subtitle>\n                    </Tile>\n                  </NavLink>\n\n                  <Tile isSize={4} isParent={true}>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.history_count_today}</Title>\n                      <Subtitle>History items today</Subtitle>\n                    </Tile>\n                  </Tile>\n\n                  <NavLink className='tile is-parent is-4' to='/aliases'>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.alias_count}</Title>\n                      <Subtitle>Aliases</Subtitle>\n                    </Tile>\n                  </NavLink>\n\n                  <NavLink className='tile is-parent is-4' to='/observers'>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.observer_count}</Title>\n                      <Subtitle>Observers</Subtitle>\n                    </Tile>\n                  </NavLink>\n\n                  <NavLink className='tile is-parent is-4' to='/cron'>\n                    <Tile isChild={true} className='box'>\n                      <Title>{stats.cron_count}</Title>\n                      <Subtitle>Cron tasks</Subtitle>\n                    </Tile>\n                  </NavLink>\n\n                  {/* These need a different way to be displayed - maybe charts\n                  * Other ideas:\n                  * - Number of Errors\n                  * - Average Yetibot response time\n                  */}\n\n                  {/* <Tile isSize={4} isParent={true}> */}\n                  {/*   <Tile isChild={true} className='box'> */}\n                  {/*     <Title>34 / 55</Title> */}\n                  {/*     <Subtitle>Configured commmands / available commands</Subtitle> */}\n                  {/*   </Tile> */}\n                  {/* </Tile> */}\n\n                  {/* <Tile isSize={4} isParent={true}> */}\n                  {/*   <Tile isChild={true} className='box'> */}\n                  {/*     <Title>Top 3 Commands</Title> */}\n                  {/*     <Subtitle>Foo bar</Subtitle> */}\n                  {/*   </Tile> */}\n                  {/* </Tile> */}\n\n                </Tile>\n              </div>\n\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport fontawesome from '@fortawesome/fontawesome';\nimport {YetibotContext} from '../yetibot-context.js';\n\nimport faSearch from '@fortawesome/fontawesome-free-solid/faSearch';\nimport faUser from '@fortawesome/fontawesome-free-solid/faUser';\nimport faTimesCircle from '@fortawesome/fontawesome-free-solid/faTimesCircle';\nimport faHashtag from '@fortawesome/fontawesome-free-solid/faHashtag';\nimport faExternal from '@fortawesome/fontawesome-free-solid/faExternalLinkAlt';\nfontawesome.library.add(faExternal, faSearch, faUser, faTimesCircle, faHashtag);\n\nimport '../style/overrides.scss';\n\nimport {\n  Container,\n  Field,\n  Icon,\n  Menu,\n  MenuLabel,\n  MenuList,\n  Navbar,\n  NavbarBrand,\n  NavbarItem,\n  NavbarStart,\n  NavbarEnd\n} from 'bloomer';\nimport {Adapters} from './Adapters';\nimport {Repl} from './Repl';\nimport {History} from './History';\nimport {Users} from './Users';\nimport {User} from './User';\nimport {Aliases} from './Aliases';\nimport {Search} from './Search';\nimport {Observers} from './Observers';\nimport {Crons} from './Crons';\nimport {Dashboard} from './Dashboard';\n// import YetibotLogo from '-!svg-react-loader?name=yetibotLogo!../img/yetibot_lambda_blue_with_grey.svg';\nimport logo from '../img/yetibot_lambda_blue_with_grey.svg';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink\n} from 'react-router-dom';\n\n\ndeclare global {\n  interface Window {\n    Yetibot: {url: string};\n  }\n}\n\nconst YETIBOT_URL = (window && window.Yetibot && window.Yetibot.url) ||\n  'http://localhost:3003';\n\nconst GRAPHQL_ENDPOINT = `${YETIBOT_URL}/graphql`;\n\nconst client = new ApolloClient({uri: GRAPHQL_ENDPOINT});\n\ninterface Props {\n  name: string;\n}\n\ninterface AppState {\n}\n\nexport class App extends Component<Props, AppState> {\n\n  constructor(props: any) {\n    super(props);\n    // TODO set active class name globally\n    (NavLink as any).defaultProps = {...(NavLink as any).defaultProps, activeClassName: 'is-active'};\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <YetibotContext.Provider value={this.state}>\n          <Router>\n            <div>\n\n              <Navbar className='is-white is-fixed-top'>\n                <Container>\n                  <NavbarStart>\n                    <NavbarBrand>\n                      <NavbarItem>\n                        <NavLink to='/'>\n                          <img\n                            style={{width: 120, height: 28}}\n                            src={logo}\n                            className=\"yetibot-lgo\"\n                            alt=\"Yetibot\"\n                          />\n                        </NavLink>\n                      </NavbarItem>\n                    </NavbarBrand>\n                  </NavbarStart>\n                  <NavbarEnd>\n                    <NavbarItem>\n                      <Field>\n                        <Search />\n                      </Field>\n                    </NavbarItem>\n                  </NavbarEnd>\n                </Container>\n              </Navbar>\n\n              <Container id='content-body'>\n                <div className='columns'>\n                  <div className='column is-2'>\n                    <Menu>\n                      <MenuLabel>Yetibot</MenuLabel>\n                      <MenuList>\n                        <li><NavLink exact={true} to='/'>Dashboard</NavLink></li>\n                        <li><NavLink to='/history'>History</NavLink></li>\n                        <li><NavLink to='/users'>Users</NavLink></li>\n                        <li><NavLink to='/adapters'>Adapters</NavLink></li>\n                        <li><NavLink to='/aliases'>Aliases</NavLink></li>\n                        <li><NavLink to='/observers'>Observers</NavLink></li>\n                        <li><NavLink to='/cron'>Cron tasks</NavLink></li>\n                        <li><NavLink to='/repl'>REPL</NavLink></li>\n                      </MenuList>\n\n                      {/* <MenuLabel>Administration</MenuLabel> */}\n                      {/* <MenuList> */}\n                      {/*   <li><Link to='history'>Configuration</Link></li> */}\n                      {/*   <li><Link to='history'>Permissions</Link></li> */}\n                      {/* </MenuList> */}\n\n                      <MenuLabel>Links</MenuLabel>\n                      <MenuList>\n                        <li>\n                          <a href='https://yetibot.com'>\n                            <Icon isSize='small' isAlign='left' className='fa fa-external-link-alt' />\n                            Yetibot.com\n                          </a>\n                        </li>\n                        <li>\n                          <a href='https://github.com/yetibot/yetibot'>\n                            <Icon isSize='small' isAlign='left' className='fa fa-external-link-alt' />\n                            GitHub\n                        </a>\n                        </li>\n                        <li>\n                          <a href='https://yetibot.com/archives'>\n                            <Icon isSize='small' isAlign='left' className='fa fa-external-link-alt' />\n                            Blog\n                          </a>\n                        </li>\n                        <li>\n                          <a href='https://yetibot.com/user-guide'>\n                            <Icon isSize='small' isAlign='left' className='fa fa-external-link-alt' />\n                            Docs\n                        </a>\n                      </li>\n                      </MenuList>\n                    </Menu>\n\n                  </div>\n\n                  <div id='content-container' className='column is-10'>\n                    <Route path='/' exact={true} component={Dashboard} />\n                    <Route path='/adapters' component={Adapters} />\n                    <Route path='/history' component={History} />\n                    <Route path='/users' exact={true} component={Users} />\n                    <Route path='/user/:id' component={User} />\n                    <Route path='/aliases' component={Aliases} />\n                    <Route path='/observers' component={Observers} />\n                    <Route path='/cron' component={Crons} />\n                    <Route path='/repl' component={Repl} />\n                  </div>\n\n                </div>\n\n              </Container>\n            </div>\n          </Router>\n        </YetibotContext.Provider>\n      </ApolloProvider>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport {App} from './components/App';\n\ntype Foo = {\n  name: string,\n};\n\nconst props: Foo = {\n  name: 'yetibot dashboard',\n};\n\nReactDOM.render(<App {...props} />,\n                document.body.appendChild(document.createElement('div')));\n\nexport const test = {\n  isJestWorking: true\n};\n"],"sourceRoot":""}